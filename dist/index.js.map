{
  "version": 3,
  "sources": ["../lib/accessors.js", "../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the first index of a specified search element in a strided array.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {*} searchElement - search element\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {integer} index\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var arraylike2object = require( '@stdlib/array-base-arraylike2object' );\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* var idx = gindexOf( x.length, 3.0, arraylike2object( toAccessorArray( x ) ), 1, 0 );\n* // returns 2\n*/\nfunction gindexOf( N, searchElement, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar get;\n\tvar ix;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessors:\n\tget = x.accessors[ 0 ];\n\n\tix = offsetX;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( get( xbuf, ix ) === searchElement ) {\n\t\t\treturn i;\n\t\t}\n\t\tix += strideX;\n\t}\n\treturn -1;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gindexOf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar arraylike2object = require( '@stdlib/array-base-arraylike2object' );\nvar accessors = require( './accessors.js' );\n\n\n// MAIN //\n\n/**\n* Returns the first index of a specified search element in a strided array using alternative indexing semantics.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {*} searchElement - search element\n* @param {Collection} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {integer} index\n*\n* @example\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, 3.0 ];\n*\n* var idx = gindexOf( x.length, 3.0, x, 1, 0 );\n* // returns 2\n*/\nfunction gindexOf( N, searchElement, x, strideX, offsetX ) {\n\tvar ix;\n\tvar o;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn -1;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, searchElement, o, strideX, offsetX );\n\t}\n\tix = offsetX;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( x[ ix ] === searchElement ) {\n\t\t\treturn i;\n\t\t}\n\t\tix += strideX;\n\t}\n\treturn -1;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gindexOf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar stride2offset = require( '@stdlib/strided-base-stride2offset' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Returns the first index of a specified search element in a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {*} searchElement - search element\n* @param {Collection} x - input array\n* @param {integer} strideX - stride length\n* @returns {integer} index\n*\n* @example\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, 3.0 ];\n*\n* var idx = gindexOf( x.length, 3.0, x, 1 );\n* // returns 2\n*/\nfunction gindexOf( N, searchElement, x, strideX ) {\n\treturn ndarray( N, searchElement, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = gindexOf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return the first index of a specified search element in a strided array.\n*\n* @module @stdlib/blas-ext-base-gindex-of\n*\n* @example\n* var gindexOf = require( '@stdlib/blas-ext-base-gindex-of' );\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, 3.0 ];\n*\n* var idx = gindexOf( x.length, 3.0, x, 1 );\n* // returns 2\n*\n* @example\n* var gindexOf = require( '@stdlib/blas-ext-base-gindex-of' );\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, 3.0 ];\n*\n* var idx = gindexOf.ndarray( x.length, 3.0, x, 1, 0 );\n* // returns 2\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cA4CA,SAASC,EAAUC,EAAGC,EAAeC,EAAGC,EAASC,EAAU,CAC1D,IAAIC,EACAC,EACAC,EACAC,EASJ,IANAH,EAAOH,EAAE,KAGTI,EAAMJ,EAAE,UAAW,CAAE,EAErBK,EAAKH,EACCI,EAAI,EAAGA,EAAIR,EAAGQ,IAAM,CACzB,GAAKF,EAAKD,EAAME,CAAG,IAAMN,EACxB,OAAOO,EAERD,GAAMJ,CACP,CACA,MAAO,EACR,CAKAL,EAAO,QAAUC,ICrEjB,IAAAU,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAmB,QAAS,qCAAsC,EAClEC,EAAY,IAqBhB,SAASC,EAAUC,EAAGC,EAAeC,EAAGC,EAASC,EAAU,CAC1D,IAAIC,EACAC,EACAC,EAEJ,GAAKP,GAAK,EACT,MAAO,GAGR,GADAM,EAAIT,EAAkBK,CAAE,EACnBI,EAAE,iBACN,OAAOR,EAAWE,EAAGC,EAAeK,EAAGH,EAASC,CAAQ,EAGzD,IADAC,EAAKD,EACCG,EAAI,EAAGA,EAAIP,EAAGO,IAAM,CACzB,GAAKL,EAAGG,CAAG,IAAMJ,EAChB,OAAOM,EAERF,GAAMF,CACP,CACA,MAAO,EACR,CAKAP,EAAO,QAAUG,ICrEjB,IAAAS,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAgB,QAAS,oCAAqC,EAC9DC,EAAU,IAoBd,SAASC,EAAUC,EAAGC,EAAeC,EAAGC,EAAU,CACjD,OAAOL,EAASE,EAAGC,EAAeC,EAAGC,EAASN,EAAeG,EAAGG,CAAQ,CAAE,CAC3E,CAKAP,EAAO,QAAUG,ICNjB,IAAIK,EAAc,QAAS,uDAAwD,EAC/EC,EAAO,IACPC,EAAU,IAKdF,EAAaC,EAAM,UAAWC,CAAQ,EAKtC,OAAO,QAAUD",
  "names": ["require_accessors", "__commonJSMin", "exports", "module", "gindexOf", "N", "searchElement", "x", "strideX", "offsetX", "xbuf", "get", "ix", "i", "require_ndarray", "__commonJSMin", "exports", "module", "arraylike2object", "accessors", "gindexOf", "N", "searchElement", "x", "strideX", "offsetX", "ix", "o", "i", "require_main", "__commonJSMin", "exports", "module", "stride2offset", "ndarray", "gindexOf", "N", "searchElement", "x", "strideX", "setReadOnly", "main", "ndarray"]
}
